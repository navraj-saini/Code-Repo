#Shell Scripting commands .


#! /bin/bash #used to start the bash script

#Working with variables::

#A) SYSTEM VARIABLES.
#1. echo $BASH : will give the current bash you are working on
#2. echo $BASH_VERSION : will give the bash version.
#3. echo $PWD : will give the current working directory.

#B) USER Variables:

name=Navraj
echo $name #will give an output 

#Taking input from user (read) command
#Example shows takinga  single input from PC
echo "Enter Name :"
read name 
echo "Enter value is $name"

#Example below shows taking multiple input from USER
echo "Enter Names:"
read name1 name2 name3
echo "Entered Values are : $name1 $name2 $name3"	
# Note : To take the input on the same line use 

read -p 'UserName : ' User_Var
echo "" $User_Var
#note : For passwords as we can't show the output then it has to use an -s flag in tandem with -p flag
read -p 'UserName:' user_var
read -sp 'Password:' pass_user
echo
echo $user_var
echo $pass_user


# USing array in  a script (read -a) flag  :
#Format of the array: 
read -ap "Enter Names: " names
echo "Entered Name are : ${names[0]}, ${names[2]}, ${names[3]}"


#USing IF else in Linux
#!/bin/bash
read -p "enter Number: " cou
if [ $cou -eq 90 ]
then
 echo "Its equal"
else
 echo "Not equal"
fi

# Doing File tests in linux

flags to keep in mind : 
-e: if the file exists or not 
-f: if the file exists and is a regular file or not
-d : to check if the directory is there or not
-c : to check if the file is a character file or not.
-b : check if the block file is there or not
-s : to check if file empty or not

format 
echo -e "Enter the name or file or directory \c"   # here \c is used for continution of cursor and -e is used to tell the interpreter that \ is present in the line.
read file_name

if [ -e $file_name ]
then
 echo"$file_name found"
else
 echo "$file_name Not found"
 
 
 # AND Operator (&&)
 
 if [ $name -gt 20 ] && [ $name -lt 30 ]
                     or
 if [ $name -gt 20 -a $name -lt 30 ]			

# OR Operator 

if [ $name -gt 20 ] || [ $name -lt 30 ] # Use pipeline



grep wordtosearch wheretosearch

https://www.cyberciti.biz/networking/nmap-command-examples-tutorials/

apt-get install nmap

nmap dns_name 

# To scan multiple names

create a txt file, input all the ipaddress in it seprated by commas,

then typ in nmap -iL filename

# Agressive Scanning

nmap -A

just to check the OS : nmap -O DNS name

# nmap -sV Ip or DNS Name: gives Port STATE Service Version  

Note: ANy server has more than 6500 ports on it out of whcih only 1 to 2% are used so ,and NMAP basically scans the 1000 most popular ports

nmap -F DNS Name

Specific portscanning : nmap -p 20-25,80,443 DNS Name

# Scan port name by the name :\

nmap -p http,mysql dnsname

To scan every single port : nmap -p- dnsname


TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL <inputfilename>: Input from list of hosts/networks
  -iR <num hosts>: Choose random targets
  --exclude <host1[,host2][,host3],...>: Exclude hosts/networks
  --excludefile <exclude_file>: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers <serv1[,serv2],...>: Specify custom DNS servers
  --system-dns: Use OS's DNS resolver
  --traceroute: Trace hop path to each host
SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags <flags>: Customize TCP scan flags
  -sI <zombie host[:probeport]>: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b <FTP relay host>: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports consecutively - don't randomize
  --top-ports <number>: Scan <number> most common ports
  --port-ratio <ratio>: Scan ports more common than <ratio>
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity <level>: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=<Lua scripts>: <Lua scripts> is a comma separated list of
           directories, script-files or script-categories
  --script-args=<n1=v1,[n2=v2,...]>: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=<Lua scripts>: Show help about scripts.
           <Lua scripts> is a comma separted list of script-files or
           script-categories.
OS DETECTION:
  -O: Enable OS detection
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
  Options which take <time> are in seconds, or append 'ms' (milliseconds),
  's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).
  -T<0-5>: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup <size>: Parallel host scan group sizes
  --min-parallelism/max-parallelism <numprobes>: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>: Specifies
      probe round trip time.
  --max-retries <tries>: Caps number of port scan probe retransmissions.
  --host-timeout <time>: Give up on target after this long
  --scan-delay/--max-scan-delay <time>: Adjust delay between probes
  --min-rate <number>: Send packets no slower than <number> per second
  --max-rate <number>: Send packets no faster than <number> per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu <val>: fragment packets (optionally w/given MTU)
  -D <decoy1,decoy2[,ME],...>: Cloak a scan with decoys
  -S <IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/--source-port <portnum>: Use given port number
  --data-length <num>: Append random data to sent packets
  --ip-options <options>: Send packets with specified ip options
  --ttl <val>: Set IP time-to-live field
  --spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA <basename>: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --log-errors: Log errors/warnings to the normal-format output file
  --append-output: Append to rather than clobber specified output files
  --resume <filename>: Resume an aborted scan
  --stylesheet <path/URL>: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output






A task T-112234 is now assigned to Navraj,

 which is a part of the story that we are already working on and is now moved to our new sprint.

@Navraj: As we discussed earlier, we are already able to collect the network data from the destination services into a .xml file. 
The task thatâ€™s assigned for you is to automate the same process and to capture the logs and get its contents extracted to /var/log/ nmap.log. 
For more details you can refer to the story B-48908 and if you have any questions on the same, feel free to reach me on my number.


nmap, diaviaitionsevices AD services, production

ping sweep

append the file ,

389,

nmap -sV 192.168.5.6 -oX >> /var/log/nmap.log


nmap -sV 192.168.5.6 -oX /var/log/nmap.log --append-output

nmap -sV 192.168.5.6 -oN /var/log/nmapa.log --append-output

/home/nsaini@DAA.LOCAL/scriptd



Task 
1: XML File created 
2: To append the File : appending complete
3: To automate the file : automation complete 




http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/

CRoNJOBS

1 crontab -l
2 sudo crontab -e
3 cronjob -r

*/10 * * * * /bin/execute/this/script.sh >> /var/log/script_output.log 2>&1

*/1 * * * * /home/nsaini@DAA.LOCAL/scriptd/nmapscript.sh >> /var/log/script_output.log 2>&1

NMAP=$(nmap -p 1700 router.eu.thethings.network)
(NMAP$ | grep "Host is up") &>/dev/null && echo "Host is up" || echo "Host is down"

#!/bin/bash
NMAP="nmap google.com"
if [ echo $NMAP | grep -i "Host is up" ]
then
 echo "Success"
else
 echo "Host is not up"
fi












 
